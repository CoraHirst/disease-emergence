---
title: "Vaccination Efficacy for Zoonoses with Varying Spillover $R_0$"
subtitle: "Recapitulating the results of Antia 2003"
format: pdf
execute:
  echo: false
  warning: false
bibliography: ../../../assets/bibFiles/dataanalysis-references.bib
csl: ../../../assets/bibFiles/apa.csl
---

```{r setup}
# load libraries 
library(ggplot2) #for plotting
library(here) #for easy local path referencing
library(tidyverse) #for easy manipulation of data structures
library(nleqslv) #for solving nonlinear systems of equations
library(gridExtra) #for arrangeing plots
source(here("code", "functions", "functions.R"))

```

# Objective

The goal of this document is to develop a multi-type branching process model to investigate the impact of vaccination on the probability of emergence of emergence of a zoonotic disease in a population. 

In this document, we will consider the simplest case of pathogen evolution, where the pathogen is a single mutation away from evolving an $R_0 >= 1$, which is sufficient for the pathogen to achieve sustained human-human transmission. 

# Model outline

We base the following on a model presented in @AntiaNature2003, which predicts the probability of disease emergence for Zoonotic variants as a function of their abilities to transmit after spillover (inital $R_0$), rates of of mutation, and mutational distance (number of mutations) from an $R_0 >= 1$. 

Predictions are made by calculating the extinction probabilities of chains of transmission initiated by a spillover variant using a multi-type branching process framework. 

For a better understanding of this model, please refer to `code/exploratory/AntiaNat2003_models.qmd`. 

# Effect of population immunity on emergence probability 

We adapt the above model to observe how the probability of emergence changes as a function of the fraction of the population immune to infection. We refer to this change in probability as $\Delta P_{emergence}$. 

We first assume that vaccination provides complete immunity, such that 25% vaccinated means a variant is 25% less likely to infect and generate offspring cases as it would be in the unvaccinated population. Ultimately: 

$$
\Delta P_{emergence} = P_{emergence}(R_{0,WT}) - P_{emergence}((1-f_v)R_{0,WT}),
$$ 
where $R_{0,WT}$ is the R_0 of the spillover variant in an unvaccinated population and $f_v$ is the fraction of the population vaccinated.  
In the code chunk below, we show the dependence of the probability of emergence of a variant with various mutation rates, $\mu$ on the probability of emergence: 

```{r changing-mu}

## parms 
R0_1s = seq(0,1.2, by = 0.01) #R1s to test
R0_2 = 1.2 # final R0_2
mus = c(10^-1, 10^-2, 10^-3, 10^-4) # mus to test 

# define initial conditions 
start = c(1,0) #start with 1 wild type and no evolved

#empty vector to store probs
probs.emergence = matrix(nrow = length(R0_1s), ncol = length(mus))

# initial guess
xstart = c(0.9, 0.1)


for(j in 1:length(mus)){
  #set mu
  mu = mus[j] 
  for(i in 1:length(R0_1s)){
   # set R0_1
    R0_1 = R0_1s[i]
    probs.emergence[i,j] = pEmergence_single(mu = mu, R0_1 = R0_1, R0_2 = R0_2, xstart = xstart, init = start)
  }
}

### prepare probs.emergence for plotting
# format wide df
probs.emergence = cbind(R0_1s, probs.emergence) %>% as.data.frame() #add R01_s column and format as df
colnames(probs.emergence) = c("R0", as.character(formatC(mus, format = "e", digits = 1))) # add mu to columns

# pivot to longform 
probs.emergence.long = probs.emergence %>%
 pivot_longer(cols = !R0,
  names_to = "mu",
  values_to = "Prob.Emergence"
)

# Plot
## colors for plotting
my.colors = c("black", "red", "forestgreen", "blue")
## plot
ggplot() + 
  geom_line(data = probs.emergence.long, aes(x = R0, y = Prob.Emergence, group = mu, col = mu)) +
  geom_line(data = probs.emergence.long %>% filter(mu == '1.0e-03'), aes(x = R0, y = Prob.Emergence), col = "forestgreen", size = 2) +
  theme_bw() +
  labs(x = "R0 of introduced pathogen", y = "Probability of emergence") +
  scale_y_continuous(trans = "log10") +
  scale_color_manual(values = my.colors)

```

We plot the predicted probabilities of emergence for a variant with $mu = 10^{-3}$ in bold, as we will be considering this curve in the next figure.


```{r deltaP-scheme}
## define params for example points
R0_wt = 0.9
f_vs = c(0.1, 0.5, 0.8)
c(R0_wt, R0_wt*(1-f_vs))

## df of points for initial R0 of 0.8 and f_v of 25%
points = probs.emergence.long %>%
  as.data.frame() %>%
  filter(mu == '1.0e-03', R0 %in% c(R0_wt, R0_wt*(1-f_vs))) 

### plot curve for mu = 10^-3
## plot
ggplot() + 
  geom_line(data = probs.emergence.long %>% filter(mu == '1.0e-03'), aes(x = R0, y = Prob.Emergence), col = "forestgreen") +
  geom_point(data = points, aes(x = R0, y = Prob.Emergence), col = "forestgreen", size = 2) +
  geom_segment(data = points, aes(x = R0, y = Prob.Emergence, xend = rep(0, nrow(points)), yend = Prob.Emergence), linetype = c(rep("dashed", nrow(points)-1), "solid")) +
  geom_segment(data = points, aes(x = R0, y = Prob.Emergence, xend = R0, yend = rep(0, nrow(points))), linetype = c(rep("dashed", nrow(points)-1), "solid")) +
  theme_bw() +
  labs(x = "R0 of introduced pathogen", y = "Probability of emergence") +
  scale_y_continuous(trans = "log10") 

# finish later blech
```

```{r deltaP-fv-single}
# parameters
mu = 10^-1 #mutation rate
R0_1s = seq(0,1.2, by = 0.01) #R1s to test
R0_2 = 1.2 #final R0_2
f_vs = seq(0,1, by = 0.01) # fractions to test

# define initial conditions 
start = c(1,0) #start with 1 wild type and no evolved

# initial guess
xstart = c(0.9, 0.1)


# storage matrix 
delta.p = matrix(nrow = length(R0_1s), ncol = length(f_vs))


# calculate delta ps
for(i in 1:length(R0_1s)){
  for(j in 1:length(f_vs)){
  ## wild-type probability
    pWT = pEmergence_single(mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, init = start, xstart = xstart)
  ## in vaccinated population 
    pVax = pEmergence_single(mu = mu, R0_1 = R0_1s[i]*(1-f_vs[j]), R0_2 = R0_2, init = start, xstart = xstart) 
   # add solution to matrix
    delta.p[i,j] = pWT - pVax
  }
}

```


```{r plot-deltaP}
#format delta.p dataframe
delta.p = cbind(R0_1s, delta.p) %>% as.data.frame() #dataframe with R0s column
colnames(delta.p) = c("R0", f_vs) #column names for referencing

#long-form 
delta.p.long = delta.p %>%
  pivot_longer(
    cols = !R0, 
    names_to = "frac_Vax",
    values_to = "DeltaP"
  )

# plot heatmap 
ggplot() + 
  geom_tile(data = delta.p.long, aes(x = R0, y = frac_Vax, fill = log10(DeltaP))) + 
  scale_y_discrete(breaks = c(0.25, 0.5, 0.75, 1))

```

Below, we plot how the above heat map for various mutation rates: 

```{r vary-mu}
# parameters
mu = 10^-1 #mutation rate
R0_1s = seq(0,1.2, by = 0.01) #R1s to test
R0_2 = 1.2 #final R0_2
f_vs = seq(0,1, by = 0.01) # fractions to test

# define initial conditions 
start = c(1,0) #start with 1 wild type and no evolved

# initial guess
xstart = c(0.9, 0.1)


# storage matrix 
delta.p = matrix(nrow = length(R0_1s), ncol = length(f_vs))


# calculate delta ps
for(i in 1:length(R0_1s)){
  for(j in 1:length(f_vs)){
  ## wild-type probability
    pWT = pEmergence_single(mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, init = start, xstart = xstart)
  ## in vaccinated population 
    pVax = pEmergence_single(mu = mu, R0_1 = R0_1s[i]*(1-f_vs[j]), R0_2 = R0_2, init = start, xstart = xstart) 
   # add solution to matrix
    delta.p[i,j] = pWT - pVax
  }
}

```


```{r plot-deltaP-varyMu}
# parameters
mus = c(10^-1, 10^-2, 10^-3, 10^-4) #mutation rate
R0_1s = seq(0,1.2, by = 0.01) #R1s to test
R0_2 = 1.2 #final R0_2
f_vs = seq(0,1, by = 0.01) # fractions to test

# define initial conditions 
start = c(1,0) #start with 1 wild type and no evolved

# initial guess
xstart = c(0.9, 0.1)

#plot for each mu
myplots <- lapply(1:length(mus), function(j) {
  mu = mus[j] #set mu
  # storage matrix 
  delta.p = matrix(nrow = length(R0_1s), ncol = length(f_vs))
  
  # calculate delta ps
  for(i in 1:length(R0_1s)){
    for(j in 1:length(f_vs)){
    ## wild-type probability
      pWT = pEmergence_single(mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, init = start, xstart = xstart)
    ## in vaccinated population 
      pVax = pEmergence_single(mu = mu, R0_1 = R0_1s[i]*(1-f_vs[j]), R0_2 = R0_2, init = start, xstart = xstart) 
     # add solution to matrix
      delta.p[i,j] = pWT - pVax
    }
  }
  
  
  #format delta.p dataframe
  delta.p = cbind(R0_1s, delta.p) %>% as.data.frame() #dataframe with R0s column
  colnames(delta.p) = c("R0", f_vs) #column names for referencing
  
  #long-form 
  delta.p.long = delta.p %>%
    pivot_longer(
      cols = !R0, 
      names_to = "frac_Vax",
      values_to = "DeltaP"
    )
  
  # plot heatmap 
  plot = ggplot() + 
          geom_tile(data = delta.p.long, aes(x = R0, y = frac_Vax, fill = log10(DeltaP))) + 
          labs(title = mu) +
          scale_y_discrete(breaks = c(0.25, 0.5, 0.75, 1))
  plot
}
)


do.call(grid.arrange, myplots)

```

### effect of vaccination dependent upon mu 

# References