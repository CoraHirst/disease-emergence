---
title: "Effect of Partial Vaccination on Preventing Emergent Zoonoses"
subtitle: "how does partial vaccination significantly delay emergence?" 
format: html

---

```{r setup}
# load libraries 
library(ggplot2) #for plotting
library(here) #for easy local path referencing
library(tidyverse) #for easy manipulation of data structures
library(nleqslv) #for solving nonlinear systems of equations
library(gridExtra) #for arrangeing plots
source(here("code", "functions", "functions.R"))

```

# Objective 


# Model

(We will be using the fixed model (show scheme) where $R_0 >> 1$ in the fully adapted phenotype.) 

Below, we plot curves for the probability of emergence of a variant spilling over with some inital $R_0$, depending on the increase in fitness gained from a mutation (`r paste("m =", ms)` gives the number of mutations required to reach an $R_0 = 1$ from an $R_0$ of 0).

```{r plotting-pE-v-R0}
## parameters
R0_1s = seq(0, 1, by = 0.01) #wt R0s to test
R0_2 = 1 #R0 at which human-human transmission is achieved/end of interval
Rfinal = 1000 #R0 of final phenotype
ms = c(2,10,20) #how many types? m-1 mutations required, meaning m-2 intermediate types
mu = 10^-3 #mutation rate

## matrix to store emergence probabilities 
probs.emergence = matrix(nrow = length(R0_1s), ncol = length(ms)) # vector to store probabilities of emergence

## simulate
for(j in 1:length(ms)){
  for(i in 1:length(R0_1s)){
    probs.emergence[i,j] = pEmergence_fixed(m = ms[j], mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, Rfinal = Rfinal) #run simulation for each m,R0_1 combination
  }
}

## format matrix for plotting
probs.emergence = cbind(R0_1s, probs.emergence) %>% as.data.frame() #format as dataframe with column denoting the R0_1 used to generate the probabilities row-wise and column for each m used to generate the probabilities column-wise
colnames(probs.emergence) = c("R0", ms) #name the columns for easy referencing
probs.emergence = probs.emergence %>% #pivot to long-form
  pivot_longer(cols = !R0, #keep R0_1 column
               names_to = "m", #add feature denoting "m" used row-wise
               values_to = "P.Emergence") #add feature denoting the pemergence calculated from m in m column and R0_1 in R0_1 column

## plot

# colors for plotting
#my.colors = c("black", "red", "forestgreen", "blue", "orange", "purple") #because pretty
# plot
ggplot() + 
  geom_line(data = probs.emergence, aes(x = R0, y = P.Emergence, group = m, col = m)) + #plot p emergence as function of R0_1 for each m
  theme_bw() + #white background with grey gridlines
  labs(x = "R0 of introduced pathogen", y = "Probability of Emergence", title = "probability of emergence with m phenotypes") + #axis and title labels
   scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
  scale_y_continuous(trans = "log10") + #log10 y scale
  scale_color_manual(values = my.colors) #because pretty



```

Effectively, vaccination reduces a variant's fitness by reducing the probability of infection per encounter (if 10% of the population is vaccinated, then the probability of running into a susceptible and transmitting is reduced by 10%.)

Below, we plot the *fold change* in the probability of emergence for a variant that spills over with some initial $R_0$ in an unvaccinated population as vaccination coverage increases: 

```{r vary-m-ratio}
# parameters
mu = 10^-3 #mutation rate
R0_1s = seq(0.5,1.0, by = 0.01) #wt R0s to test
R0_2 = 1.0 #emergence R_0
Rfinal = 1000 #final phenotype R_0
f_vs = seq(0,0.25, by = 0.01) # fractions to test
ms = c(2,10,20) #how many types? m-1 mutations required, meaning m-2 intermediate types


#plot for each mu
myplots <- lapply(1:length(ms), function(j) {
  m = ms[j] #set mu
  # storage matrix 
  delta.p = matrix(nrow = length(R0_1s), ncol = length(f_vs))
  
  # calculate delta ps
  for(i in 1:length(R0_1s)){
    for(j in 1:length(f_vs)){
    ## wild-type probability
      pWT = pEmergence_fixed(m = m, mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, Rfinal = Rfinal)
    ## in vaccinated population 
      pVax = pEmergence_fixed(m = m, mu = mu, R0_1 = R0_1s[i]*(1-f_vs[j]), R0_2 = R0_2, Rfinal = Rfinal) 
     # add solution to matrix
      delta.p[i,j] = pWT / pVax
    }
  }
  
  
  #format delta.p dataframe
  delta.p = cbind(R0_1s, delta.p) %>% as.data.frame() #dataframe with R0s column
  colnames(delta.p) = c("R0", f_vs) #column names for referencing
  
  #long-form 
  delta.p.long = delta.p %>%
    pivot_longer(
      cols = !R0, 
      names_to = "frac_Vax",
      values_to = "DeltaP"
    )
  
  # plot heatmap 
  plot = ggplot() + 
          geom_tile(data = delta.p.long, aes(x = R0, y = frac_Vax, fill = log10(DeltaP))) + 
          labs(x = "spillover R0", y = "fraction vaccinated", fill = "log10 FC PE", title = paste("m =", m)) +
    scale_x_continuous(limits = c(0.75, 1)) +
          scale_y_discrete(breaks = c(0.25, 0.5, 0.75, 1)) +
  scale_fill_gradient(low = "white", high = "blue") 
  plot
}
)
do.call(grid.arrange, myplots)
```

The average time to emergence should be given as $\frac{1}{P_{emergence}*rate of introductions}$ for a variant with any given spillover $R_0$. This assumes that a variant with a given $R_0$ is introduced to the population at some rate, and each introduction event has a probability $P_emergence$ of starting an epidemic.

Below, we plot $\frac{1}{P_{emergence}}$ for a given $R_0$, as well as the fold reduction in $\frac{1}{P_{emergence}}$ as a function of the fraction of the population vaccinated: 

```{r time-to}
## parameters
R0_1s = seq(0, 1, by = 0.01) #wt R0s to test
R0_2 = 1 #R0 at which human-human transmission is achieved/end of interval
Rfinal = 1000 #R0 of final phenotype
ms = seq(2, 12, by = 2)#how many types? m-1 mutations required, meaning m-2 intermediate types
mu = 10^-3 #mutation rate

## matrix to store emergence probabilities 
timesto.emergence = matrix(nrow = length(R0_1s), ncol = length(ms)) # vector to store probabilities of emergence

## simulate
for(j in 1:length(ms)){
  for(i in 1:length(R0_1s)){
    timesto.emergence[i,j] = 1/pEmergence_fixed(m = ms[j], mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, Rfinal = Rfinal) #run simulation for each m,R0_1 combination
  }
}

## format matrix for plotting
timesto.emergence = cbind(R0_1s, timesto.emergence) %>% as.data.frame() #format as dataframe with column denoting the R0_1 used to generate the probabilities row-wise and column for each m used to generate the probabilities column-wise
colnames(timesto.emergence) = c("R0", ms) #name the columns for easy referencing
timesto.emergence = timesto.emergence %>% #pivot to long-form
  pivot_longer(cols = !R0, #keep R0_1 column
               names_to = "m", #add feature denoting "m" used row-wise
               values_to = "TimeTo.Emergence") #add feature denoting the pemergence calculated from m in m column and R0_1 in R0_1 column

## plot

# colors for plotting
my.colors = c("black", "red", "forestgreen", "blue", "orange", "purple") #because pretty
# plot
ggplot() + 
  geom_line(data = timesto.emergence, aes(x = R0, y = TimeTo.Emergence, group = m, col = m)) + #plot p emergence as function of R0_1 for each m
  theme_bw() + #white background with grey gridlines
  labs(x = "R0 of introduced pathogen", y = "Relative Time to Emergence (1/p)", title = "Times to emergence with m phenotypes") + #axis and title labels
  scale_y_continuous(trans = "log10") + #log10 y scale
  scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
  scale_color_manual(values = my.colors) #because pretty





```

Finally, we will plot the probability of emergence, $P_E$ as a function of $\mu$ and spillover $R_0$, for combinations of $m$ and $f_v$.  Ultimately, we would like to observe the extent to which varying degrees of vaccination change the probability of emergence for zoonotic spillovers with varying $R_0$ and mutation rates, according to how many mutations are required to adapt to human hosts. 

```{r PE-m-fv}
# parameters
mus = 10^seq(-6,-3, by = 0.1) #mutation rate
R0_1s = seq(0.75,1.0, by = 0.01) #wt R0s to test
R0_2 = 1.0 #emergence R_0
Rfinal = 1000 #final phenotype R_0
ms = c(5,10,20) #how many types? m-1 mutations required, meaning m-2 intermediate types
f_vs = c(0,.05,.10,.2) #portion of population vaccinated

# combinations of parameters 
parms.grid = expand.grid("fv" = f_vs, "m" = ms) %>% as.data.frame() 

#plot for each m and r combo
myplots <- lapply(1:nrow(parms.grid), function(plot) {
  # set m and r
  m = parms.grid[plot,"m"] # number of possible phenotypes
  fv = parms.grid[plot, "fv"] # fraction vaccinated (reduces R0 to R0(1-fv))
  
  # storage matrix 
  P.Es = matrix(nrow = length(R0_1s), ncol = length(mus)) #store times to emergence for each R0_1/mu pair
  
  # calculate delta ps
  for(i in 1:length(R0_1s)){
    for(j in 1:length(mus)){
    ## wild-type probability
      P.E = pEmergence_fixed(m = m, mu = mus[j], R0_1 = R0_1s[i]*(1-fv), R0_2 = R0_2, Rfinal = Rfinal) #calculated emergence probability for each combinations
    
     # add solution to matrix
      P.Es[i,j] = P.E #add to matrix for plotting
    }
  }
  
  #format P.Es dataframe
  P.Es = cbind(R0_1s, P.Es) %>% as.data.frame() #dataframe with R0s column
  colnames(P.Es) = c("R0", mus) #column names for referencing
  
  #long-form 
  P.Es.long = P.Es %>%
    pivot_longer(
      cols = !R0, 
      names_to = "Mut.Rate",
      values_to = "P.Emergence"
    )
  
  # plot heatmap 
  plot = ggplot() + 
          geom_tile(data = P.Es.long, aes(x = R0, y = as.numeric(Mut.Rate), fill = log10(P.Emergence))) + 
          labs(x = "spillover R0", y = "mutation rate", fill = "log10 PE", title = paste0("Fv = ", fv, ", m = ", m)) +
   # scale_x_continuous(limits = c(0.75, 1)) +
         scale_y_continuous(breaks = 10^seq(-1, -5, -1), trans = "log10") +
  scale_fill_gradient(low = "white", high = "blue", limits = c(-15, 0)) 
  plot
}
)


#plot together on one grid
do.call(grid.arrange, list("grobs" = myplots, "nrow" = 3))

```

Finally, we would like to plot the fold change in the P.E for a wild-type variant with a given spillover $R_0$ in an unvaccinated population as the fraction of vaccinated individuals increases. 

```{r FC-PE-m-fv}
# parameters
mus = 10^seq(-6,-3, by = 0.1) #mutation rate
R0_1s = seq(0.75,1.0, by = 0.01) #wt R0s to test
R0_2 = 1.0 #emergence R_0
Rfinal = 1000 #final phenotype R_0
ms = c(5,10,20) #how many types? m-1 mutations required, meaning m-2 intermediate types
f_vs = c(.05,.10,.2) #portion of population vaccinated

# combinations of parameters 
parms.grid = expand.grid("fv" = f_vs, "m" = ms) %>% as.data.frame() 

#plot for each m and r combo
myplots <- lapply(1:nrow(parms.grid), function(plot) {
  # set m and r
  m = parms.grid[plot,"m"] # number of possible phenotypes
  fv = parms.grid[plot, "fv"] # fraction vaccinated (reduces R0 to R0(1-fv))
  
  # storage matrix 
  delta.Ps = matrix(nrow = length(R0_1s), ncol = length(mus)) #store times to emergence for each R0_1/mu pair
  
  # calculate delta ps
  for(i in 1:length(R0_1s)){
    for(j in 1:length(mus)){
    ## wild-type probability
      pWT = pEmergence_fixed(m = m, mu = mus[j], R0_1 = R0_1s[i], R0_2 = R0_2, Rfinal = Rfinal) #calculated emergence probability with spillover wt R0
      
      ## vaccination probability
      pVax = pEmergence_fixed(m = m, mu = mus[j], R0_1 = R0_1s[i]*(1-fv), R0_2 = R0_2, Rfinal = Rfinal) #calculated emergence probability for spillover R0 in vaccinated population
    
     # add solution to matrix
      delta.Ps[i,j] = pWT / pVax #add to matrix for plotting
    }
  }
  
  #format P.Es dataframe
  delta.Ps = cbind(R0_1s, delta.Ps) %>% as.data.frame() #dataframe with R0s column
  colnames(delta.Ps) = c("R0", mus) #column names for referencing
  
  #long-form 
  delta.Ps.long = delta.Ps %>%
    pivot_longer(
      cols = !R0, 
      names_to = "Mut.Rate",
      values_to = "deltaP"
    )
  
  # plot heatmap 
  plot = ggplot() + 
          geom_tile(data = delta.Ps.long, aes(x = R0, y = as.numeric(Mut.Rate), fill = log10(deltaP))) + 
          labs(x = "spillover R0", y = "mutation rate", fill = "log10 deltaP", title = paste0("Fv = ", fv, ", m = ", m)) +
   # scale_x_continuous(limits = c(0.75, 1)) +
         scale_y_continuous(breaks = 10^seq(-1, -5, -1), trans = "log10") +
  scale_fill_gradient(low = "white", high = "blue") 
  plot
}
)


#plot together on one grid
do.call(grid.arrange, list("grobs" = myplots, "nrow" = 3))

```


# Notes

- effectiveness of intervening is higher when variants require many mutations (start with the same prob of emergence, fraction of vaccinatio pushes farther down on steeper curve)
- time to emergence before/after vaccination heat maps, fold change heat map
