---
title: "Vaccination Efficacy for Zoonoses with Varying Spillover $R_0$"
subtitle: "Recapitulating the results of Antia 2003"
format: pdf
execute:
  echo: false
  warning: false
bibliography: ../../../assets/bibFiles/dataanalysis-references.bib
csl: ../../../assets/bibFiles/apa.csl
---

```{r setup}
# load libraries 
library(ggplot2) #for plotting
library(here) #for easy local path referencing
library(tidyverse) #for easy manipulation of data structures
library(nleqslv) #for solving nonlinear systems of equations
library(gridExtra) #for arrangeing plots
source(here("code", "functions", "functions.R"))

```

# Objective

The goal of this document is to develop a multi-type branching process model to investigate the impact of vaccination on the probability of emergence of emergence of a zoonotic disease in a population.

In this document, we will consider the case of multi-step pathogen evolution, where a wild-type variant is multiple mutations away from evolving an $R_0 >= 1$ in humans to achieve sustained human-human transmission.

# Model outline

We base the following on a model presented in @AntiaNature2003, which predicts the probability of disease emergence for Zoonotic variants as a function of their abilities to transmit after spillover (inital $R_0$), rates of of mutation, and mutational distance (number of mutations) from an $R_0 >= 1$.

Predictions are made by calculating the extinction probabilities of chains of transmission initiated by a spillover variant using a multi-type branching process framework. Each "type" within the branching process model represents an infection with a variant of a certain number of mutations - thus `m` types represent `m` types of variants, from wild-type to human evolved. In this document, variant transmission grows increasingly better with each added mutation at a fixed increase per mutation, and thus follows the "additive model" described in @AntiaNature2003.

For a model with a single intermediate variant (two mutations required for adaptation to humans), we plot the relationship between the probability of emergence and the initial R0 of the wild-type variant as a function of the mutation rate below. Note that the following is plotted according to the function described in @AntiaNature2003, such that the $R_0$ of the intermediate variant is the average of the $R_0$ of the adapted and wild-type variants. 


```{r additive}
#### additive model
## parms 
R0_1s = seq(0,1.2, by = 0.01) #R1s to test
R0_2 = 1.5 # final R0_2
mus = c(10^-1, 10^-3) #how many intermediate steps?
m = 3 #1 in paper; number of types here, number of intermediates in paper

#empty vector to store probs
probs.emergence = matrix(nrow = length(R0_1s), ncol = length(mus))

#run simulation for each number of mutations
for(j in 1:length(mus)){
  #set mu 
  mu = mus[j] 
  # initial guess
  xstart = c(1, 0, 0)
  #set init
  init = c(1, 0, 0)
  for(i in 1:length(R0_1s)){
   # set variable parms
    R0_1 = R0_1s[i] # set wild type R0
   # add solution to matrix
    probs.emergence[i,j] = pEmergence_additive_paper(mu=mu, R0_1=R0_1, R0_2=R0_2, xstart=xstart, init=init)
  }
}

### prepare probs.emergence for plotting
# format wide df
probs.emergence = cbind(R0_1s, probs.emergence) %>% as.data.frame() #add R01_s column and format as df
colnames(probs.emergence) = c("R0", paste0(mus)) # add mu to columns

# pivot to longform 
probs.emergence.long = probs.emergence %>%
 pivot_longer(cols = !R0,
  names_to = "mu",
  values_to = "Prob.Emergence"
)

# Plot
## colors for plotting
my.colors = c("black", "red", "green", "blue", "orange")
## plot
ggplot() + 
  geom_line(data = probs.emergence.long, aes(x = R0, y = Prob.Emergence, group = mu, col = mu)) +
  theme_bw() +
  labs(x = "R0 of introduced pathogen", y = "Probability of emergence", title = "Single intermediate additive model (Antia et al 2003)") +
  scale_y_continuous(trans = "log10", limits = c(10^-7, 1)) + scale_x_continuous(limits = c(0,1)) +
  scale_x_continuous(limits = c(0.01,1)) +
  scale_color_manual(values = my.colors)



```

Below, we plot the same figure, but generated by a more generalizable function wherein the fitness of intermediates increases by some some fixed step. This step size is dependent upon the specified number of intermediates between the wild-type and adapted variant, such that $R-0$ increases by $(R_{0,final}-R_{0,wt})/(m-1)$ with each of the $m-1$ mutations:

```{r additive-model}
#### additive model
## parms 
R0_1s = seq(0,1.2, by = 0.01) #R1s to test
R0_2 = 1.5 # final R0_2
mus = c(10^-1, 10^-3) #how many intermediate steps?
m = 3 #0:4 in paper; number of types here, number of intermediates in paper

#empty vector to store probs
probs.emergence = matrix(nrow = length(R0_1s), ncol = length(mus))
# initial guess
xstart = c(1, rep(0, (m-1)))
#set init
init = c(1, rep(0, m-1))

#populate matrix
for(j in 1:length(mus)){
  # set mu
  mu = mus[j]
  for(i in 1:length(R0_1s)){
   # set variable parms
    R0_1 = R0_1s[i] # set wild type R0
   # add solution to vector
    probs.emergence[i,j] = pEmergence_additive(m=m, mu=mu, R0_1=R0_1, R0_2=R0_2, xstart=xstart, init=init)
  }
}

### prepare probs.emergence for plotting
# format wide df
probs.emergence = cbind(R0_1s, probs.emergence) %>% as.data.frame() #add R01_s column and format as df
colnames(probs.emergence) = c("R0", paste0(mus)) # add mu to columns

# pivot to longform 
probs.emergence.long = probs.emergence %>%
 pivot_longer(cols = !R0,
  names_to = "mu",
  values_to = "Prob.Emergence"
)

# Plot
## colors for plotting
my.colors = c("black", "red", "green", "blue", "orange")
## plot
ggplot() + 
  geom_line(data = probs.emergence.long, aes(x = R0, y = Prob.Emergence, group = mu, col = mu)) +
  theme_bw() +
  labs(x = "R0 of introduced pathogen", y = "Probability of emergence", title = "Generalizable additive model, single intermediate") +
  scale_y_continuous(trans = "log10", limits = c(10^-7, 1)) +
  scale_x_continuous(limits = c(0.01, 1)) +
  scale_color_manual(values = my.colors)

```

For a better understanding of this model, please refer to `code/exploratory/AntiaNat2003_models.qmd`.

Finally, we use the generalizable additive model, which I will simply refer to as the "additive model" hereafter, to plot the probability of emergence as a function of the number of mutations required for human-human transmission as well as wtR0 (initial) R0. 



```{r varym-additive}
#### additive model
## parms 
R0_1s = seq(0,1.2, by = 0.01) #R1s to test
R0_2 = 1.5 # final R0_2
mu = 10^-3 #how many intermediate steps?
ms = 2:6 #0:4 in paper; number of types here, number of intermediates in paper

#empty vector to store probs
probs.emergence = matrix(nrow = length(R0_1s), ncol = length(ms))

#populate matrix
#choose m
for(j in 1:length(ms)){
  # set mu
  m = ms[j]
  # initial guess
  xstart = c(1, rep(0, (m-1)))
  #set init
  init = c(1, rep(0, m-1))
  
  # choose R0_1
  for(i in 1:length(R0_1s)){
   # set variable parms
    R0_1 = R0_1s[i] # set wild type R0
   # add solution to vector
    probs.emergence[i,j] = pEmergence_additive(m=m, mu=mu, R0_1=R0_1, R0_2=R0_2, xstart=xstart, init=init)
  }
}

### prepare probs.emergence for plotting
# format wide df
probs.emergence = cbind(R0_1s, probs.emergence) %>% as.data.frame() #add R01_s column and format as df
colnames(probs.emergence) = c("R0", paste0(ms)) # add mu to columns

# pivot to longform 
probs.emergence.long = probs.emergence %>%
 pivot_longer(cols = !R0,
  names_to = "m",
  values_to = "Prob.Emergence"
)

# Plot

### add a curve for single jackpot to compare
single_probs = NaN #empty vector
for(i in 1:length(R0_1s)){ single_probs[i] = pEmergence_single(mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, xstart = c(1, 0), init = c(1,0))} #populate with single pE function
single_probs = cbind(R0_1s, single_probs) %>% as.data.frame() #format dataframe
colnames(single_probs) = c("R0", "PE") #column names for referencing

### add curve for paper additive model with 1 intermediate
m = 3 #set m
paper_additive_probs = NaN #empty vector
for(i in 1:length(R0_1s)){paper_additive_probs[i] = pEmergence_additive_paper(mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, xstart = c(1, 0, 0), init = c(1,0,0))} #populate with single pE function
paper_additive_probs = cbind(R0_1s, paper_additive_probs) %>% as.data.frame() #format dataframe
colnames(paper_additive_probs) = c("R0", "PE") #column names for referencing

## colors for plotting
my.colors = c("black", "red", "green", "blue", "orange")
## plot
ggplot() + 
  geom_line(data = probs.emergence.long, aes(x = R0, y = Prob.Emergence, group = m, col = m)) +
  geom_line(data = single_probs, aes(x = R0, y = PE), col = "white", linetype = "dashed") +
  geom_line(data = paper_additive_probs, aes(x = R0, y = PE), col = "black", linetype = "dashed") +
  theme_bw() +
  labs(x = "R0 of introduced pathogen", y = "Probability of emergence", title = "Generalizable additive model with varying types") +
  scale_y_continuous(trans = "log10", limits = c(10^-7, 1)) +
  scale_x_continuous(limits = c(0.01, 1)) +
  scale_color_manual(values = my.colors)

```

Note that the "m=2" case should follow the case of a single mutation with a $\mu = 10^{-3}$, included in a dashed white line (sanity check!)

Also note that the "m=3" case should follow the function used in @AntiaNature2003, where the fitness of the single intermediate variant is hte average of the fitness of the wild type and adapted variants, included in a dashed black line (sanity check!)

# Probability of emergence with constant increase in R0 

Now, we would like to plot the probability of emergence for a linneage starting some number of mutations away from adaptation to humans, where $R_0$ increases by a fixed step with each mutation. 

The difference between this model and the additive model is that the wild-type $R_0$ determines the number of mutations the wild-type variant is away from the adapted variant, and each mutation increases the $R_0$ by a fixed step regardless of the number of mutations remaining. 

We plot the additive and fixed-step models below for varying numbers of total mutations: 

```{r comparison-additive-fixed}
## parameters
R0_1s = seq(0, 1.2, by = 0.01) #wt R0s to test
R0_2 = 1.2 #R0 at which human-human transmission is achieved/end of interval
ms = 2:6 #how many types? m-1 mutations required, meaning m-2 intermediate types
mu = 10^-3 #mutation rate

################### fixed step model #######################################
probs.emergence.fixed = matrix(nrow = length(R0_1s), ncol = length(ms)) #matrix to store probabilities of emergence

# solve for probabilities given each starting R_0
for(j in 1:length(ms)){
  for(i in 1:length(R0_1s)){
    probs.emergence.fixed[i,j] = pEmergence_fixed(m = ms[j], mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2)
  }
}
## format df for plotting
probs.emergence.fixed = cbind(R0_1s, probs.emergence.fixed) %>% as.data.frame() #add r01 column to record the wild-type r0 for each row
colnames(probs.emergence.fixed) = c("R0", ms) #name the columns for referencing

probs.emergence.fixed = probs.emergence.fixed %>% #long form for plotting
 pivot_longer(cols = !R0,
  names_to = "m",
  values_to = "Prob.Emergence"
)

################### additive model #######################################
probs.emergence.additive = matrix(nrow = length(R0_1s), ncol = length(ms)) #matrix to store probabilities of emergence

# solve for probabilities given each starting R_0
for(j in 1:length(ms)){
  # set m
  m = ms[j]
  # initial guess
  xstart = c(1, rep(0, (m-1)))
  #set init
  init = c(1, rep(0, m-1))
  #solve for probs
  for(i in 1:length(R0_1s)){
    probs.emergence.additive[i,j] = pEmergence_additive(m = m, mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, xstart=xstart, init=init)
  }
}
## format df for plotting
probs.emergence.additive = cbind(R0_1s, probs.emergence.additive) %>% as.data.frame() #add r01 column to record the wild-type r0 for each row
colnames(probs.emergence.additive) = c("R0", ms) #name the columns for referencing

probs.emergence.additive = probs.emergence.additive %>% #long form for plotting
 pivot_longer(cols = !R0,
  names_to = "m",
  values_to = "Prob.Emergence"
)

##### plot both
ggplot() + 
  geom_line(data = probs.emergence.fixed, aes(x = R0, y = Prob.Emergence, group = m, col = m, linetype = "fixed")) +
  geom_line(data = probs.emergence.additive, aes(x = R0, y = Prob.Emergence, group = m, col = m, linetype = "additive")) +
   theme_bw() +
  labs(x = "R0 of introduced pathogen", y = "Probability of emergence", title = "Additive vs Fixed model") +
  scale_y_continuous(trans = "log10", limits = c(10^-7, 1)) +
  scale_x_continuous(limits = c(0.01, 1)) +
  scale_color_manual(values = my.colors, labels = ms) +
  scale_linetype_manual(values = c("dashed", "solid"))

################ jackpot ##############



```

Below, we plot the fixed model with an approximation of the fixed model:
(albeit I guess not that good of one :()

```{r}
## parameters
R0_1s = seq(0, 1.2, by = 0.01) #wt R0s to test
R0_2 = 1.2 #R0 at which human-human transmission is achieved/end of interval
ms = 2:6 #how many types? m-1 mutations required, meaning m-2 intermediate types
mu = 10^-3 #mutation rate

################### fixed step model #######################################
probs.emergence.fixed = matrix(nrow = length(R0_1s), ncol = length(ms)) #matrix to store probabilities of emergence

# solve for probabilities given each starting R_0
for(j in 1:length(ms)){
  for(i in 1:length(R0_1s)){
    probs.emergence.fixed[i,j] = pEmergence_fixed(m = ms[j], mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2)
  }
}
## format df for plotting
probs.emergence.fixed = cbind(R0_1s, probs.emergence.fixed) %>% as.data.frame() #add r01 column to record the wild-type r0 for each row
colnames(probs.emergence.fixed) = c("R0", ms) #name the columns for referencing

probs.emergence.fixed = probs.emergence.fixed %>% #long form for plotting
 pivot_longer(cols = !R0,
  names_to = "m",
  values_to = "Prob.Emergence"
)

############ approximation 
# parms
R0_1s = seq(0,0.99, by = 0.01) # approximation fails at R0 wt > 1
probs.emergence.approximation = matrix(nrow = length(R0_1s), ncol = length(ms)) #matrix to store probabilities of emergence

# solve for probabilities given each starting R_0
for(j in 1:length(ms)){
  m = ms[j] #set m
  
  for(i in 1:length(R0_1s)){
  R0_1 = R0_1s[i] #set wild type r0  
  
  ### calculate step size and breaks
  Rstep = R0_2/(m-1) #increase in R0 with each mutation
  breaks = Rstep*(1:(m)) #intervals describing the range of R0 for types (variants) with increasing number of mutations
  
  ### define R0 vector 
  ## determine into which interval the wtR0 falls
  diffs = breaks - R0_1 #distance from wtR0 to each interval break
  type = which(diffs == min(diffs[which(diffs >= 0)]))[1] # position of the least positive distance gives the interval - type - into which the wtR0 falls
  
  ## calculate change in R0 from wt to each other variant
    R0 = c(rep(1/(mu+1), type-1), R0_1, R0_1 + Rstep*(1:(m-type)))
    
    
    probs.emergence.approximation[i,j] = prod(mu*R0[1:(m-1)]/(1-R0[1:(m-1)]))*(1-1/R0[m])
  }
}

## format df for plotting
probs.emergence.approximation = cbind(R0_1s, probs.emergence.approximation) %>% as.data.frame() #add r01 column to record the wild-type r0 for each row
colnames(probs.emergence.approximation) = c("R0", ms) #name the columns for referencing

probs.emergence.approximation = probs.emergence.approximation %>% #long form for plotting
 pivot_longer(cols = !R0,
  names_to = "m",
  values_to = "Prob.Emergence"
)

##### plot both
ggplot() + 
  geom_line(data = probs.emergence.fixed, aes(x = R0, y = Prob.Emergence, group = m, col = m, linetype = "fixed")) +
  geom_line(data = probs.emergence.approximation, aes(x = R0, y = Prob.Emergence, group = m, col = m, linetype = "approximation")) +
   theme_bw() +
  labs(x = "R0 of introduced pathogen", y = "Probability of emergence", title = "Approximation vs Fixed model") +
  scale_y_continuous(trans = "log10", limits = c(10^-7, 1)) +
  scale_x_continuous(limits = c(0.01, 1)) +
  scale_color_manual(values = my.colors, labels = ms) +
  scale_linetype_manual(values = c("dashed", "solid"))


```