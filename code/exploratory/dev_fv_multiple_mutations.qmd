---
title: "Vaccination Efficacy for Zoonoses with Varying Spillover $R_0$"
subtitle: "Simulating disease emergence for viruses requiring multiple mutations to adapt"
format: pdf
execute:
  echo: false
  warning: false
bibliography: ../../../assets/bibFiles/dataanalysis-references.bib
csl: ../../../assets/bibFiles/apa.csl
---

```{r setup}
# load libraries 
library(ggplot2) #for plotting
library(here) #for easy local path referencing
library(tidyverse) #for easy manipulation of data structures
library(nleqslv) #for solving nonlinear systems of equations
library(gridExtra) #for arrangeing plots
source(here("code", "functions", "functions.R"))

```

# Objective

The goal of this document is to expand upon a multi-type branching process of virus transmission to investigate the impact of vaccination on the probability of emergence of a zoonotic disease in a human population. 

In this document, we will consider the case of multi-step evolution, where multiple mutations are required for adaptation to humans (that is, having an $R_0$ > 1 such that an epidemic occurs.)

# Model scheme

We first consider a simple scheme of multi-step evolution. We suggest that a zoonotic virus requires a certain number of mutations to achieve human-human transmission. The virus can have $m$ phenotypes corresponding to the number of mutations they have accumulated; after mutation, $R_0$ increases by a fixed step, such that the $R_0$ associated with each phenotype increases from phenotype 1 (0 mutations) to phenotype $m$ ($m-1$ mutations). Finally, we simulate the probability of emergence of a wild-type variant with some $R_0$ that has caused a single infection in human, where the number of mutations the virus must acquire is determined by the wild-type $R_0$. (Picture with intervals showing range of $R_0$ we define from [0,1].) 

We note that, with a fixed increase in $R_0$ each mutation, the $R_0$ of the starting variant determines the $R_0$ of the final, adapted variant, which in turn plays a crucial role in the overall probability of emergence of a linneage (picture description would help here.) To account for this problem, it would be ideal to allow $R_0$ after vaccination to continue increase, with decreasing step size, to some maximum possible $R_0$. 

However, we approximate this process to the case where the $R_0$ of the final variant phenotype is the same and >> 1 regardless of the $R_0$ of the wild-type. 

# Simulation 

Below, we plot the emergence probability for a spillover variant as a function of its wild-type $R_0$ and the total number of mutations that exist in the evolution path: 

```{r fixed-model}
## parameters
R0_1s = seq(0, 1, by = 0.01) #wt R0s to test
R0_2 = 1 #R0 at which human-human transmission is achieved/end of interval
Rfinal = 1000 #R0 of final phenotype
ms = 2:6 #how many types? m-1 mutations required, meaning m-2 intermediate types
mu = 10^-3 #mutation rate

## matrix to store emergence probabilities 
probs.emergence = matrix(nrow = length(R0_1s), ncol = length(ms)) # vector to store probabilities of emergence

## simulate
for(j in 1:length(ms)){
  for(i in 1:length(R0_1s)){
    probs.emergence[i,j] = pEmergence_fixed(m = ms[j], mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, Rfinal = Rfinal) #run simulation for each m,R0_1 combination
  }
}

## format matrix for plotting
probs.emergence = cbind(R0_1s, probs.emergence) %>% as.data.frame() #format as dataframe with column denoting the R0_1 used to generate the probabilities row-wise and column for each m used to generate the probabilities column-wise
colnames(probs.emergence) = c("R0", ms) #name the columns for easy referencing
probs.emergence = probs.emergence %>% #pivot to long-form
  pivot_longer(cols = !R0, #keep R0_1 column
               names_to = "m", #add feature denoting "m" used row-wise
               values_to = "P.Emergence") #add feature denoting the pemergence calculated from m in m column and R0_1 in R0_1 column

## plot
breaks = (R0_2/5)*(1:5) #example of intervals for m = 6
# colors for plotting
my.colors = c("black", "red", "forestgreen", "blue", "orange") #because pretty
# plot
ggplot() + 
  geom_line(data = probs.emergence, aes(x = R0, y = P.Emergence, group = m, col = m)) + #plot p emergence as function of R0_1 for each m
  theme_bw() + #white background with grey gridlines
  geom_vline(xintercept = breaks, col = "orange", linetype = "dashed") + #add dashed vertical lines for intervals
  labs(x = "R0 of introduced pathogen", y = "Probability of Emergence", title = "probability of emergence with m phenotypes") + #axis and title labels
  scale_y_continuous(trans = "log10") + #log10 y scale
  scale_color_manual(values = my.colors) #because pretty


```

Below, we plot a heatmap to observe the extent to which decreasing wild-type $R_0$ via vaccination reduces the probability of emergence. Here, $f_v$ is the portion of the population vaccinated, which reduces the $R_0$ of a spilled-over variant from $R_0$ to $(1-f_v)R_0$. Each cell is colored according to the *difference* between the probaility of emergence with the wild-type $R_0$ and the probability of emergence with the effecitvely reduced $R_0$.

NOTE FOR FUTURE: when we vaccinate, we aren't changing the number of mutations needed for emergence, or are we? Problem with "paths" to adaptation. 

```{r heatmap}
# parameters
mu = 10^-3 #mutation rate
R0_1s = seq(0,1.0, by = 0.1) #wt R0s to test
R0_2 = 1.0 #emergence R_0
Rfinal = 1000 #final phenotype R_0
f_vs = seq(0,1, by = 0.1) # fractions to test
m = 4

# storage matrix 
delta.p = matrix(nrow = length(R0_1s), ncol = length(f_vs))


# calculate delta ps
for(i in 1:length(R0_1s)){
  for(j in 1:length(f_vs)){
  ## wild-type probability
    pWT = pEmergence_fixed(m = m, mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, Rfinal = Rfinal)
  ## in vaccinated population 
    pVax = pEmergence_fixed(m = m, mu = mu, R0_1 = R0_1s[i]*(1-f_vs[j]), R0_2 = R0_2, Rfinal = Rfinal) 
   # add solution to matrix
    delta.p[i,j] = pWT - pVax
  }
}

#format delta.p dataframe
delta.p = cbind(R0_1s, delta.p) %>% as.data.frame() #dataframe with R0s column
colnames(delta.p) = c("R0", f_vs) #column names for referencing

#long-form 
delta.p.long = delta.p %>%
  pivot_longer(
    cols = !R0, 
    names_to = "frac_Vax",
    values_to = "DeltaP"
  )


```


```{r plot-deltaP}
# plot heatmap 
ggplot() + 
  geom_tile(data = delta.p.long, aes(x = R0, y = frac_Vax, fill = log10(DeltaP))) + 
  scale_y_discrete(breaks = c(0.25, 0.5, 0.75, 1)) +
  scale_fill_gradient(low = "blue", high = "white")




```


Below, we plot the above heatmap for varying numbers of possible phenotypes, $m$:

```{r vary-m}
# parameters
mu = 10^-3 #mutation rate
R0_1s = seq(0,1.0, by = 0.01) #wt R0s to test
R0_2 = 1.0 #emergence R_0
Rfinal = 1000 #final phenotype R_0
f_vs = seq(0,1, by = 0.01) # fractions to test
ms = 2:6 #number of possible phenotypes


#plot for each mu
myplots <- lapply(1:length(ms), function(j) {
  m = ms[j] #set mu
  # storage matrix 
  delta.p = matrix(nrow = length(R0_1s), ncol = length(f_vs))
  
  # calculate delta ps
  for(i in 1:length(R0_1s)){
    for(j in 1:length(f_vs)){
    ## wild-type probability
      pWT = pEmergence_fixed(m = m, mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, Rfinal = Rfinal)
    ## in vaccinated population 
      pVax = pEmergence_fixed(m = m, mu = mu, R0_1 = R0_1s[i]*(1-f_vs[j]), R0_2 = R0_2, Rfinal = Rfinal) 
     # add solution to matrix
      delta.p[i,j] = pWT - pVax
    }
  }
  
  
  #format delta.p dataframe
  delta.p = cbind(R0_1s, delta.p) %>% as.data.frame() #dataframe with R0s column
  colnames(delta.p) = c("R0", f_vs) #column names for referencing
  
  #long-form 
  delta.p.long = delta.p %>%
    pivot_longer(
      cols = !R0, 
      names_to = "frac_Vax",
      values_to = "DeltaP"
    )
  
  # plot heatmap 
  plot = ggplot() + 
          geom_tile(data = delta.p.long, aes(x = R0, y = frac_Vax, fill = log10(DeltaP))) + 
          labs(title = m) +
          scale_y_discrete(breaks = c(0.25, 0.5, 0.75, 1)) +
  scale_fill_gradient(low = "white", high = "blue")
  plot
}
)
do.call(grid.arrange, myplots)
```

we plot the ratio below:

```{r vary-m-ratio}
# parameters
mu = 10^-3 #mutation rate
R0_1s = seq(0,1.0, by = 0.01) #wt R0s to test
R0_2 = 1.0 #emergence R_0
Rfinal = 1000 #final phenotype R_0
f_vs = seq(0,0.25, by = 0.01) # fractions to test
ms = round(10^seq(0,2, by = 0.5)) #number of possible phenotypes


#plot for each mu
myplots <- lapply(1:length(ms), function(j) {
  m = ms[j] #set mu
  # storage matrix 
  delta.p = matrix(nrow = length(R0_1s), ncol = length(f_vs))
  
  # calculate delta ps
  for(i in 1:length(R0_1s)){
    for(j in 1:length(f_vs)){
    ## wild-type probability
      pWT = pEmergence_fixed(m = m, mu = mu, R0_1 = R0_1s[i], R0_2 = R0_2, Rfinal = Rfinal)
    ## in vaccinated population 
      pVax = pEmergence_fixed(m = m, mu = mu, R0_1 = R0_1s[i]*(1-f_vs[j]), R0_2 = R0_2, Rfinal = Rfinal) 
     # add solution to matrix
      delta.p[i,j] = pWT / pVax
    }
  }
  
  
  #format delta.p dataframe
  delta.p = cbind(R0_1s, delta.p) %>% as.data.frame() #dataframe with R0s column
  colnames(delta.p) = c("R0", f_vs) #column names for referencing
  
  #long-form 
  delta.p.long = delta.p %>%
    pivot_longer(
      cols = !R0, 
      names_to = "frac_Vax",
      values_to = "DeltaP"
    )
  
  # plot heatmap 
  plot = ggplot() + 
          geom_tile(data = delta.p.long, aes(x = R0, y = frac_Vax, fill = log10(DeltaP))) + 
          labs(title = m) +
          scale_y_discrete(breaks = c(0.25, 0.5, 0.75, 1)) +
  scale_fill_gradient(low = "white", high = "blue")
  plot
}
)
do.call(grid.arrange, myplots)
```

We investigate this relationship further in `code/project/R0_range_of_interest.qmd`.
